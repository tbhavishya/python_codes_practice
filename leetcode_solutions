# Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent. Return the answer in any order. 
# A mapping of digits to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.
class Solution:
    def letterCombinations(self, digits: str) -> List[str]:
        lst, s = [], ""
        dct = {'2':'abc','3':'def','4':'ghi','5':'jkl','6':'mno', '7':'pqrs','8':'tuv','9':'wxyz'}
        if digits is "":
            return lst
        a = len(digits)
        if a == 1:
            return [x for x in dct[digits]]
        else:
            self.recur_approach(digits, dct, lst, s, i=0)
            return lst
    def recur_approach(self, digits, dct, lst, s, i=0):
        if i == len(digits):
            lst.append(s)
            return
        for x in dct[digits[i]]:
            self.recur_approach(digits, dct, lst, s+x, i+1)


## Given an array nums of n integers, return an array of all the unique quadruplets [nums[a], nums[b], nums[c], nums[d]] such that:
## 0 <= a, b, c, d < n
## a, b, c, and d are distinct.
## nums[a] + nums[b] + nums[c] + nums[d] == target
## You may return the answer in any order.

class Solution:
    def fourSum(self, nums: List[int], target: int) -> List[List[int]]:
        if not nums or len(nums) < 4:
            return []
        s, m = set(), len(nums)
        nums.sort()
        for i in range(m-3):
            
            for j in range(i+1,m-2):
                l, r = j+1, m-1
                
                while l < r:
                    if (nums[i]+nums[j]+nums[l]+nums[r]) == target:
                        s.add((nums[i], nums[j], nums[l], nums[r]))
                        l+=1
                        r-=1
                    elif (nums[i]+nums[j]+nums[l]+nums[r]) < target:
                        l+=1
                    elif (nums[i]+nums[j]+nums[l]+nums[r]) > target:
                        r-=1
               
        return list(s)

## Given an array nums of distinct integers, return all the possible permutations. You can return the answer in any order.

class Solution:
    def permute(self, nums: List[int]) -> List[List[int]]:

        if len(nums) == 1:
            return [nums]
        
        lst = []
        
        for j in range(len(nums)):
            
            k = nums[j]
            p = nums[:j] + nums[j+1:]

            for i in self.permute(p):
                lst.append([k] + i)
                
        return lst

